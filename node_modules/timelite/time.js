"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./utils");
/**
 * Add an array of string time values "HH:mm:ss".
 *
 * Usage:
 *  > add(['04:20:10', '21:15:10'])
 *  > [ 25, 35, 20 ]
 *  > add(['04:35:10', '21:35:10'])
 *  > [ 26, 10, 20 ]
 *  > add(['30:59', '17:10'])
 *  > [ 48, 09, 0 ]
 *  > add(['19:30:00', '00:30:00'])
 *  > [ 20, 0, 0 ]
 *
 * @param string[] arr Array of string times to add
 * @returns number[] Time result in array format. E.g [5, 0, 0]
 */
function add(arr) {
    var intTimes = Array.isArray(arr) ? arr : [arr];
    var lenArr = intTimes.length;
    var times = utils_1.DATETIME.slice(0);
    for (var i = 0; i < lenArr; i++) {
        var time = utils_1.splitDateTime(intTimes[i], utils_1.TIME_SEPARATOR);
        for (var e = 0; e < utils_1.DATETIME_LEN; e++) {
            times[e] += time[e];
        }
    }
    var hours = times[0];
    var minutes = times[1];
    var seconds = times[2];
    if (seconds >= 60) {
        var m = (seconds / 60) << 0;
        minutes += m;
        seconds -= 60 * m;
    }
    if (minutes >= 60) {
        var h = (minutes / 60) << 0;
        hours += h;
        minutes -= 60 * h;
    }
    return [hours, minutes, seconds];
}
exports.add = add;
/**
 * Format an array time values into string time.
 *
 * @param number[] arr Array of times to format. E.g. [12, 10, 45]
 * @returns string String time format.
 */
function str(arr) {
    return utils_1.formatDateTime(arr, utils_1.TIME_SEPARATOR);
}
exports.str = str;
/**
 * Substract an array of string time values "HH:mm:ss".
 *
 * Usage:
 *  > sub(['20:05:10', '10:10:50'])
 *  > [ 9, 54, 20 ]
 *  > sub(['20:40:10', '20:10:50'])
 *  > [ 0, 29, 20 ]
 *
 * @param string[] arr
 * @returns number[]
 */
function sub(arr) {
    var intTimes = Array.isArray(arr) ? arr : [arr];
    var lenArr = intTimes.length;
    var times = utils_1.DATETIME.slice(0);
    var prev = 0;
    for (var i = 0; i < lenArr; i++) {
        var time = utils_1.splitDateTime(intTimes[i], utils_1.TIME_SEPARATOR);
        for (var e = utils_1.DATETIME_LEN - 1; e > -1; e--) {
            var unit = time[e];
            // first time value
            if (!i) {
                times[e] = unit;
            }
            else {
                // prev value (minor)
                if (times[e] < unit) {
                    // 60's formula
                    if (times[0] === time[0] && times[1] === time[1]) {
                        times[e] = 60 - ((60 - unit) + times[e]);
                    }
                    else {
                        times[e] = (60 - unit) + times[e];
                        if (prev) {
                            times[e] -= prev;
                        }
                    }
                    prev = 1;
                }
                else {
                    // prev value (major)
                    times[e] = times[e] - unit;
                    if (times[e]) {
                        times[e] = times[e] - prev;
                    }
                }
            }
        }
    }
    return times;
}
exports.sub = sub;
